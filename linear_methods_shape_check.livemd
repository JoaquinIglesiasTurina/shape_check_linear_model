<!-- livebook:{"persist_outputs":true} -->

# Linear Methods Shape Check

## Section

```elixir
{x, y} = ShapeCheckLinearModels.diabetes_data()
```

<!-- livebook:{"output":true} -->

```
{#Nx.Tensor<
   f32[442][10]
   EXLA.Backend<host:0, 0.2208721820.3629252639.33352>
   [
     [59.0, 2.0, 32.099998474121094, 101.0, 157.0, 93.19999694824219, 38.0, 4.0, 4.859799861907959, 87.0],
     [48.0, 1.0, 21.600000381469727, 87.0, 183.0, 103.19999694824219, 70.0, 3.0, 3.8917999267578125, 69.0],
     [72.0, 2.0, 30.5, 93.0, 156.0, 93.5999984741211, 41.0, 4.0, 4.672800064086914, 85.0],
     [24.0, 1.0, 25.299999237060547, 84.0, 198.0, 131.39999389648438, 40.0, 5.0, 4.8902997970581055, 89.0],
     [50.0, 1.0, 23.0, 101.0, 192.0, 125.4000015258789, 52.0, 4.0, 4.290500164031982, ...],
     ...
   ]
 >,
 #Nx.Tensor<
   f32[442][1]
   EXLA.Backend<host:0, 0.2208721820.3629252639.33354>
   [
     [151.0],
     [75.0],
     [141.0],
     [206.0],
     [135.0],
     [97.0],
     [138.0],
     [63.0],
     [110.0],
     [310.0],
     [101.0],
     [69.0],
     [179.0],
     [185.0],
     [118.0],
     [171.0],
     [166.0],
     [144.0],
     [97.0],
     [168.0],
     [68.0],
     [49.0],
     [68.0],
     [245.0],
     [184.0],
     [202.0],
     [137.0],
     [85.0],
     [131.0],
     [283.0],
     [129.0],
     [59.0],
     [341.0],
     [87.0],
     [65.0],
     [102.0],
     [265.0],
     [276.0],
     [252.0],
     [90.0],
     [100.0],
     [55.0],
     [61.0],
     [92.0],
     [259.0],
     [53.0],
     [190.0],
     [142.0],
     ...
   ]
 >}
```

```elixir
alias Scholar.Linear
```

<!-- livebook:{"output":true} -->

```
Scholar.Linear
```

```elixir
lr = Linear.LinearRegression.fit(x, y |> Nx.flatten())
Linear.LinearRegression.predict(lr, x)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[442]
  EXLA.Backend<host:0, 0.2208721820.3629252632.33236>
  [206.12606811523438, 68.00396728515625, 176.83590698242188, 167.01541137695312, 128.53067016601562, 106.31961059570312, 73.9251708984375, 118.97293090820312, 158.76605224609375, 213.55239868164062, 97.11599731445312, 95.24752807617188, 115.01165771484375, 164.67010498046875, 102.97805786132812, 177.50112915039062, 211.63595581054688, 182.95077514648438, 148.02725219726562, 123.9603271484375, 120.28335571289062, 85.84475708007812, 113.14816284179688, 252.30569458007812, 165.52407836914062, 147.83401489257812, 97.07000732421875, 178.96884155273438, 128.93341064453125, 184.58071899414062, 158.68527221679688, 69.31146240234375, 261.6287536621094, 112.57608032226562, 78.303955078125, 87.39712524414062, 207.86050415039062, 157.72769165039062, 241.00369262695312, 136.87149047851562, 153.56759643554688, 74.05294799804688, 145.74267578125, 77.5455322265625, 221.16537475585938, 125.29934692382812, 142.5953369140625, 109.51043701171875, 73.096435546875, 190.01303100585938, ...]
>
```

```elixir
modules = [
  Linear.BayesianRidgeRegression,
  Linear.IsotonicRegression,
  Linear.LinearRegression,
  Linear.PolynomialRegression,
  Linear.RidgeRegression,
  Linear.SVM
]
```

<!-- livebook:{"output":true} -->

```
[Scholar.Linear.BayesianRidgeRegression, Scholar.Linear.IsotonicRegression,
 Scholar.Linear.LinearRegression, Scholar.Linear.PolynomialRegression,
 Scholar.Linear.RidgeRegression, Scholar.Linear.SVM]
```

```elixir
Enum.map(modules, fn module ->
  try do
    reg = module.fit(x, y)
    module.predict(reg, x)
  rescue
    e ->
      IO.inspect(module)
      e
  end
end)
```

<!-- livebook:{"output":true} -->

```
Scholar.Linear.BayesianRidgeRegression
Scholar.Linear.IsotonicRegression
Scholar.Linear.LinearRegression
Scholar.Linear.SVM
```

<!-- livebook:{"output":true} -->

```
[
  %ArgumentError{
    message: "dot/zip expects shapes to be compatible, dimension 1 of left-side (1) does not equal dimension 0 of right-side (10)"
  },
  %MatchError{term: {442, 10, 1}},
  %ArgumentError{
    message: "dot/zip expects shapes to be compatible, dimension 1 of left-side (10) does not equal dimension 0 of right-side (1)"
  },
  #Nx.Tensor<
    f32[442]
    EXLA.Backend<host:0, 0.2208721820.3629252632.33357>
    [-1117.4715576171875, -611.94091796875, -1156.8406982421875, 683.214111328125, 278.7823486328125, -2182.65185546875, -1132.0084228515625, 4065.931640625, -135.52093505859375, -664.1611938476562, -2623.442138671875, 654.0501708984375, -334.61865234375, -327.61480712890625, 164.8367919921875, 4047.77197265625, -0.763671875, 1592.6998291015625, -904.3734130859375, -321.8819580078125, -1404.1793212890625, -1124.07080078125, 16.4334716796875, 204.99853515625, -794.6251220703125, -197.5498046875, -2608.2890625, -1323.959716796875, -1212.6143798828125, -1872.522705078125, -331.841552734375, -1550.010009765625, -809.2666015625, -2070.84033203125, -1666.9168701171875, 627.870361328125, -299.9505615234375, -1089.5657958984375, 3381.8125, 105.258056640625, 2459.07421875, -2169.595458984375, -1157.418701171875, -5.5980224609375, -82.7777099609375, -212.9405517578125, ...]
  >,
  #Nx.Tensor<
    f32[442][1]
    EXLA.Backend<host:0, 0.2208721820.3629252632.33365>
    [
      [205.60177612304688],
      [68.77603149414062],
      [176.4385986328125],
      [166.01333618164062],
      [128.55960083007812],
      [105.97085571289062],
      [75.14019775390625],
      [120.26376342773438],
      [159.14126586914062],
      [212.80813598632812],
      [97.69839477539062],
      [98.20736694335938],
      [114.90689086914062],
      [163.794189453125],
      [102.78729248046875],
      [176.9078369140625],
      [210.67764282226562],
      [182.72848510742188],
      [147.61257934570312],
      [123.26358032226562],
      [119.52841186523438],
      [87.42538452148438],
      [114.37841796875],
      [256.0657043457031],
      [165.28753662109375],
      [147.01608276367188],
      [96.71478271484375],
      [178.73544311523438],
      [128.11215209960938],
      [183.70925903320312],
      [158.83920288085938],
      [69.01571655273438],
      [261.3101501464844],
      [111.35546875],
      [78.81546020507812],
      [86.34622192382812],
      [206.93386840820312],
      [156.56875610351562],
      [241.32223510742188],
      [136.34176635742188],
      [153.62298583984375],
      [73.91073608398438],
      [145.31442260742188],
      [77.92562866210938],
      [220.54519653320312],
      ...
    ]
  >,
  %ArgumentError{message: "expected y to have shape {n_samples}, got tensor with shape: {442, 1}"}
]
```
